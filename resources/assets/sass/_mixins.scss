@import "_variables";

$enable-rounded: true;
$border-radius: $radius;

@mixin button-variant($color, $background, $border) {
	$active-background: darken($background, 5%);
	$active-border: darken($border, 7%);

	color: $color;
	background-color: $background;
	border-color: $border;
	//@include box-shadow($btn-box-shadow);

	.icon {
		fill: $color;

		path {
			fill: $color;
		}
	}

	// Hover and focus styles are shared
	@include hover {
		color: $color;
		background-color: $active-background;
		border-color: $active-border;

		.icon {
			fill: $color;

			path {
				fill: $color;
			}
		}
	}
	&:focus,
	&.focus {
		// Avoid using mixin so we can pass custom focus shadow properly
		@if $enable-shadows {
			box-shadow: $btn-box-shadow, 0 0 0 2px rgba($border, .5);
		} @else {
			box-shadow: 0 0 0 2px rgba($border, .5);
		}
	}

	// Disabled comes first so active can properly restyle
	&.disabled,
	&:disabled {
		background-color: $background;
		border-color: $border;
	}

	&:active,
	&.active,
	.show > &.dropdown-toggle {
		color: $color;
		background-color: $active-background;
		background-image: none; // Remove the gradient for the pressed/active state
		border-color: $active-border;
		//@include box-shadow($btn-active-box-shadow);
	}
}

@mixin button-outline-variant($color, $color-hover: #fff) {
	color: $color;
	background-image: none;
	background-color: transparent;
	border-color: $color;

	.icon {
		fill: $color;

		path {
			fill: $color;
		}
	}

	@include hover {
		color: $color-hover;
		background-color: $color;
		border-color: $color;

		.icon {
			fill: $color-hover;
			
			path {
				fill: $color-hover;
			}
		}
	}

	&:focus,
	&.focus {
		box-shadow: 0 0 0 2px rgba($color, .5);
	}

	&.disabled,
	&:disabled {
		color: $color;
		background-color: transparent;
	}

	&:active,
	&.active,
	.show > &.dropdown-toggle {
		color: $color-hover;
		background-color: $color;
		border-color: $color;
	}
}

@mixin btn-pseudo-states($color, $background, $border) {
	color: $color;
	background-color: $background;
	border-color: $border;

	&:hover,
	&:focus,
	&:active,
	&.active {
		background-color: darken($background, 5%);
		border-color: darken($border, 10%);
	}

	&.disabled,
	&[disabled],
	fieldset[disabled] & {
		&,
		&:hover,
		&:focus,
		&:active,
		&.active {
			background-color: $background;
			border-color: $border;
		}
	}
}

@mixin border-radius($radius: $border-radius) {
	@if $enable-rounded {
		border-radius: $radius;
	}
}

@mixin border-top-radius($radius) {
	@if $enable-rounded {
		border-top-right-radius: $radius;
		border-top-left-radius: $radius;
	}
}

@mixin border-right-radius($radius) {
	@if $enable-rounded {
		border-bottom-right-radius: $radius;
		border-top-right-radius: $radius;
	}
}

@mixin border-bottom-radius($radius) {
	@if $enable-rounded {
		border-bottom-right-radius: $radius;
		border-bottom-left-radius: $radius;
	}
}

@mixin border-left-radius($radius) {
	@if $enable-rounded {
		border-bottom-left-radius: $radius;
		border-top-left-radius: $radius;
	}
}

@mixin panel-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {
	border-color: $border;

	& > .panel-heading {
		color: $heading-text-color;
		background-color: $heading-bg-color;
		border-color: $heading-border;

		+ .panel-collapse > .panel-body {
			border-top-color: $border;
		}
		.badge {
			color: $heading-bg-color;
			background-color: $heading-text-color;
		}
	}
	& > .panel-footer {
		+ .panel-collapse > .panel-body {
			border-bottom-color: $border;
		}
	}
}

@mixin gradient ($start, $end) {
	background: $end;
	background: linear-gradient(to bottom, $start 0%, $end 100%);
}
